name: 'Build Valve Source Plugin Navmesh'
description: 'Builds the valve_source_plugin_navmesh for various platforms'
inputs:
  repo-path:
    description: 'Path to the valve_source_plugin_navmesh repository within the workspace'
    required: true
    default: 'valve_source_plugin_navmesh' # Default to the cloned directory name

runs:
  using: "composite"
  steps:
    - name: Checkout valve_source_plugin_navmesh
      uses: actions/checkout@v4
      with:
        path: ${{ inputs.repo-path }}
        repository: Xeogin/valve_source_plugin_navmesh # Ensure this is your repository
        token: ${{ github.token }} # Use GITHUB_TOKEN for cloning
        ssh-strict: true
        ssh-user: git
        persist-credentials: true
        clean: true
        sparse-checkout-cone-mode: true
        fetch-depth: 1
        fetch-tags: false
        show-progress: true
        lfs: false
        submodules: false
        set-safe-directory: true

    - name: Checkout Source SDK 2013
      uses: actions/checkout@v4
      with:
        repository: ValveSoftware/source-sdk-2013
        ref: master
        path: source-sdk-2013 # This will put the SDK in a sibling directory to your plugin
        token: ${{ github.token }} # Use GITHUB_TOKEN for cloning
        ssh-strict: true
        ssh-user: git
        persist-credentials: true
        clean: true
        sparse-checkout-cone-mode: true
        fetch-depth: 1
        fetch-tags: false
        show-progress: true
        lfs: false
        submodules: false
        set-safe-directory: true

    - name: Prepare Source SDK for Linux (64-bit)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        # Install 64-bit build tools and 32-bit compatibility libraries (multilib)
        # The Source SDK often needs these for its own build process or for linking against older components.
        sudo apt-get install -y build-essential gcc-multilib g++-multilib lib32gcc-s1 lib32stdc++6

        # Navigate to the SDK's multiplayer source directory
        # CORRECTED PATH: The 'src' directory is directly under the checked out SDK root.
        cd "${{github.workspace}}/source-sdk-2013/src"

        # Run the SDK's build scripts to generate Makefiles/project files for Linux
        # This is CRUCIAL for setting up the SDK's own build environment for 64-bit.
        # The 'buildallprojects' script typically handles both 32-bit and 64-bit.
        ./buildallprojects # This script sets up the build environment for the SDK itself
        # You might also need to run ./creategameprojects if your plugin is a game module
      shell: bash

    - name: Configure CMake
      run: |
        # Ensure you are in your plugin's directory for CMake configuration
        cd "${{ github.workspace }}/${{ inputs.repo-path }}"
        
        # Create a build directory if it doesn't exist
        mkdir -p build_linux
        cd build_linux

        # Configure CMake for a Release build targeting 64-bit Linux.
        # Set CMAKE_TOOLCHAIN_FILE to use Valve's Linux toolchain from the SDK.
        # Point CMAKE_BUILD_TYPE to Release for optimized builds.
        # Define SOURCE_SDK_PATH to the checked out Source SDK.
        cmake \
          -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/source-sdk-2013/linux_tools/linux_gcc_64.cmake" \
          -DCMAKE_BUILD_TYPE=Release \
          -DSOURCE_SDK_PATH="${{ github.workspace }}/source-sdk-2013" \
          .. # Point to the parent directory where your CMakeLists.txt resides
      shell: bash

    - name: Build with CMake
      run: |
        # Navigate to the build directory created in the previous step
        cd "${{ github.workspace }}/${{ inputs.repo-path }}/build_linux"

        # Build the project using CMake. -j will use all available cores for faster compilation.
        cmake --build . -j $(nproc)
      shell: bash

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: navmesh-plugin-linux
        path: ${{ github.workspace }}/${{ inputs.repo-path }}/build_linux/*.so # Adjust to capture your compiled .so file
        # You might want to include debug symbols or other relevant files here.
