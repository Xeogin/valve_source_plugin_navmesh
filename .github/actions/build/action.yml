name: 'Build Valve Source Plugin Navmesh'
description: 'Builds the valve_source_plugin_navmesh for various platforms'
inputs:
  repo-path:
    description: 'Path to the valve_source_plugin_navmesh repository within the workspace'
    required: true
    default: 'valve_source_plugin_navmesh'

runs:
  using: "composite"
  steps:
    - name: Checkout valve_source_plugin_navmesh
      uses: actions/checkout@v4
      with:
        path: ${{ inputs.repo-path }}
        repository: Xeogin/valve_source_plugin_navmesh
        token: ${{ github.token }}
        ssh-strict: true
        ssh-user: git
        persist-credentials: true
        clean: true
        sparse-checkout-cone-mode: true
        fetch-depth: 1
        fetch-tags: false
        show-progress: true
        lfs: false
        submodules: false
        set-safe-directory: true

    - name: Checkout Source SDK 2013
      uses: actions/checkout@v4
      with:
        repository: ValveSoftware/source-sdk-2013
        ref: master
        path: source-sdk-2013
        token: ${{ github.token }}
        persist-credentials: true
        clean: true
        fetch-depth: 1
        fetch-tags: false
        show-progress: true
        lfs: false
        submodules: false
        set-safe-directory: true

    - name: "List Source SDK src contents Windows (Initial Check)"
      if: runner.os == 'Windows'
      run: |
        echo "Attempting to list contents of src directory."
        dir "${{ github.workspace }}\source-sdk-2013\src"
      shell: cmd

    # --- Linux Specific Steps (no change) ---
    - name: Prepare Source SDK for Linux (64-bit)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gcc-multilib g++-multilib lib32gcc-s1 lib32stdc++6
        cd "${{github.workspace}}/source-sdk-2013/src"
        ./buildallprojects
      shell: bash

    - name: Configure CMake for Linux
      if: runner.os == 'Linux'
      run: |
        cd "${{ github.workspace }}/${{ inputs.repo-path }}"
        mkdir -p build_linux
        cd build_linux

        cmake \
          -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/source-sdk-2013/linux_tools/linux_gcc_64.cmake" \
          -DCMAKE_BUILD_TYPE=Release \
          -DSOURCE_SDK_PATH="${{ github.workspace }}/source-sdk-2013" \
          ..
      shell: bash

    - name: Build with CMake for Linux
      if: runner.os == 'Linux'
      run: |
        cd "${{ github.workspace }}/${{ inputs.repo-path }}/build_linux"
        cmake --build . -j $(nproc)
      shell: bash

    - name: Upload Linux Artifact
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
        name: navmesh-plugin-linux
        path: ${{ github.workspace }}/${{ inputs.repo-path }}/build_linux/*.so

    # --- Windows Specific Steps (Crucial Changes Here) ---
    - name: Generate Source SDK 2013 Project Files (Windows)
      if: runner.os == 'Windows'
      run: |
        REM Set up the Visual Studio build environment (x64)
        CALL "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat" x64
        
        REM Navigate to the SDK source directory for VPC
        PUSHD "${{ github.workspace }}\source-sdk-2013\src"
        
        REM Run VPC to generate project and solution files
        echo "Running createallprojects.bat..."
        createallprojects.bat
        IF %ERRORLEVEL% NEQ 0 (
            echo "ERROR: createallprojects.bat failed!"
            EXIT /B %ERRORLEVEL%
        )
        echo "createallprojects.bat completed."

        REM --- DIAGNOSTIC START: Verify files immediately after generation (still might not show up due to cmd quirk) ---
        echo "Verifying contents of src directory immediately after createallprojects.bat:"
        dir *.vcxproj
        dir everything.sln
        echo "Verifying contents of parent directory (just in case):"
        dir ..\*.vcxproj
        dir ..\*.sln
        REM --- DIAGNOSTIC END ---
        
        REM Return to the previous directory
        POPD
      shell: cmd

    - name: "Verify .vcxproj files after Generation step (Windows)"
      if: runner.os == 'Windows'
      run: |
        echo "Checking for .vcxproj files in ${{ github.workspace }}\source-sdk-2013\src after the Generation step completes:"
        dir "${{ github.workspace }}\source-sdk-2013\src\*.vcxproj"
        echo "Checking for everything.sln in ${{ github.workspace }}\source-sdk-2013\src after the Generation step completes:"
        dir "${{ github.workspace }}\source-sdk-2013\src\everything.sln"
        
        REM --- NEW DIAGNOSTICS FROM PREVIOUS RUN ---
        echo "Checking for .vcxproj files in the runner's TEMP directory:"
        dir "%TEMP%\*.vcxproj" /s /b
        echo "Checking for .vcxproj files in the runner's user profile (TEMP for GitHub Actions):"
        dir "%USERPROFILE%\AppData\Local\Temp\*.vcxproj" /s /b
        echo "Checking for .vcxproj files in the workspace root:"
        dir "${{ github.workspace }}\*.vcxproj" /s /b
        REM --- NEW DIAGNOSTICS END HERE ---
        
      shell: cmd # Important to use cmd for Windows `dir` command

    - name: Build Source SDK 2013 Libraries (Windows)
      if: runner.os == 'Windows'
      run: |
        REM Set up the Visual Studio build environment (x64) - must be called in each new shell
        CALL "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat" x64
        
        REM Define the base path to the SDK src directory
        SET "SDK_SRC_DIR=${{ github.workspace }}\source-sdk-2013\src"

        REM --- DIAGNOSTIC START ---
        echo "Attempting to list contents of SDK_SRC_DIR for .vcxproj files using absolute path:"
        dir "%SDK_SRC_DIR%\*.vcxproj"
        echo "Listing specific tier1_win64.vcxproj file using absolute path:"
        dir "%SDK_SRC_DIR%\tier1\tier1_win64.vcxproj"
        REM --- DIAGNOSTIC END ---
        
        REM --- Explicitly build critical missing libraries using absolute paths ---
        echo "Attempting to build tier1.lib explicitly using absolute path..."
        msbuild "%SDK_SRC_DIR%\tier1\tier1_win64.vcxproj" /p:Configuration="Release" /p:Platform="x64" /v:d
        IF %ERRORLEVEL% NEQ 0 (
            echo "ERROR: tier1.lib build failed!"
            EXIT /B %ERRORLEVEL%
        )
        echo "tier1.lib build command completed."
        
        echo "Attempting to build mathlib.lib explicitly using absolute path..."
        msbuild "%SDK_SRC_DIR%\mathlib\mathlib_win64.vcxproj" /p:Configuration="Release" /p:Platform="x64" /v:d
        IF %ERRORLEVEL% NEQ 0 (
            echo "ERROR: mathlib.lib build failed!"
            EXIT /B %ERRORLEVEL%
        )
        echo "mathlib.lib build command completed."

        REM Build the 'everything.sln' solution with detailed output using absolute path.
        REM Trying 'Win32' as the platform for the solution as 'x64' might not be a valid solution platform name
        echo "Attempting to build everything.sln using absolute path with Platform=Win32..."
        msbuild "%SDK_SRC_DIR%\everything.sln" /p:Configuration="Release" /p:Platform="Win32" /v:d
        IF %ERRORLEVEL% NEQ 0 (
            echo "ERROR: everything.sln build failed!"
            EXIT /B %ERRORLEVEL%
        )
        echo "everything.sln build command completed."
        
        REM No POPD needed here as we didn't PUSHD
      shell: cmd

    - name: "Inspect Source SDK x64 lib output (Crucial Step)"
      if: runner.os == 'Windows'
      run: |
        echo "Listing contents of source-sdk-2013/src/lib/public/x64:"
        dir "${{ github.workspace }}\source-sdk-2013\src\lib\public\x64"
        echo "Listing ALL .lib files found recursively in source-sdk-2013/src/lib/public:"
        dir "${{ github.workspace }}\source-sdk-2013\src\lib\public\" /s /b *.lib
      shell: cmd

    - name: Configure CMake for Windows
      if: runner.os == 'Windows'
      run: |
        # Ensure you are in your plugin's directory for CMake configuration
        cd "${{ github.workspace }}/${{ inputs.repo-path }}"

        # Create a build directory if it doesn't exist
        mkdir -p build_windows
        cd build_windows

        # Configure CMake for a Release build targeting Windows.
        # CMake will automatically find Visual Studio if it's in the PATH.
        cmake -G "Visual Studio 17 2022" \
          -DCMAKE_BUILD_TYPE=Release \
          -DSOURCE_SDK_PATH="${{ github.workspace }}/source-sdk-2013" \
          .. # Point to the parent directory where your CMakeLists.txt resides
      shell: bash

    - name: Build with CMake for Windows
      if: runner.os == 'Windows'
      run: |
        # Navigate to the build directory created in the previous step
        cd "${{ github.workspace }}/${{ inputs.repo-path }}/build_windows"

        # Build the project using CMake. CMake will invoke MSBuild.
        cmake --build . --config Release
      shell: bash

    - name: Upload Windows Artifact
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: navmesh-plugin-windows
        path: |
          ${{ github.workspace }}/${{ inputs.repo-path }}/build_windows/Release/*.dll
          ${{ github.workspace }}/${{ inputs.repo-path }}/build_windows/Debug/*.dll
